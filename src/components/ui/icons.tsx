'use client'

import * as React from 'react'

import { cn } from '@/lib/utils'

function IconNextChat({
  className,
  inverted,
  ...props
}: React.ComponentProps<'svg'> & { inverted?: boolean }) {
  const id = React.useId()

  return (
    <svg
      viewBox="0 0 17 17"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <defs>
        <linearGradient
          id={`gradient-${id}-1`}
          x1="10.6889"
          y1="10.3556"
          x2="13.8445"
          y2="14.2667"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor={inverted ? 'white' : 'black'} />
          <stop
            offset={1}
            stopColor={inverted ? 'white' : 'black'}
            stopOpacity={0}
          />
        </linearGradient>
        <linearGradient
          id={`gradient-${id}-2`}
          x1="11.7555"
          y1="4.8"
          x2="11.7376"
          y2="9.50002"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor={inverted ? 'white' : 'black'} />
          <stop
            offset={1}
            stopColor={inverted ? 'white' : 'black'}
            stopOpacity={0}
          />
        </linearGradient>
      </defs>
      <path
        d="M1 16L2.58314 11.2506C1.83084 9.74642 1.63835 8.02363 2.04013 6.39052C2.4419 4.75741 3.41171 3.32057 4.776 2.33712C6.1403 1.35367 7.81003 0.887808 9.4864 1.02289C11.1628 1.15798 12.7364 1.8852 13.9256 3.07442C15.1148 4.26363 15.842 5.83723 15.9771 7.5136C16.1122 9.18997 15.6463 10.8597 14.6629 12.224C13.6794 13.5883 12.2426 14.5581 10.6095 14.9599C8.97637 15.3616 7.25358 15.1692 5.74942 14.4169L1 16Z"
        fill={inverted ? 'black' : 'white'}
        stroke={inverted ? 'black' : 'white'}
        strokeWidth={2}
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <mask
        id="mask0_91_2047"
        style={{ maskType: 'alpha' }}
        maskUnits="userSpaceOnUse"
        x={1}
        y={0}
        width={16}
        height={16}
      >
        <circle cx={9} cy={8} r={8} fill={inverted ? 'black' : 'white'} />
      </mask>
      <g mask="url(#mask0_91_2047)">
        <circle cx={9} cy={8} r={8} fill={inverted ? 'black' : 'white'} />
        <path
          d="M14.2896 14.0018L7.146 4.8H5.80005V11.1973H6.87681V6.16743L13.4444 14.6529C13.7407 14.4545 14.0231 14.2369 14.2896 14.0018Z"
          fill={`url(#gradient-${id}-1)`}
        />
        <rect
          x="11.2222"
          y="4.8"
          width="1.06667"
          height="6.4"
          fill={`url(#gradient-${id}-2)`}
        />
      </g>
    </svg>
  )
}
function IconMagnolia({
  className,
  inverted,
  ...props
}: React.ComponentProps<'svg'> & { inverted?: boolean }) {
  const id = React.useId()

  return (
    <svg
      viewBox="0 0 512 512"
      fillRule="evenodd"
      fill={inverted ? 'white' : 'black'}
      xmlns="http://www.w3.org/2000/svg"
      className={cn('h-4 w-4', className)}
      {...props}
      width="512" height="512"
    >
      <path d="M 270 26.543 C 266.425 27.284, 255.400 29.060, 245.500 30.489 C 235.600 31.919, 225.052 33.781, 222.060 34.627 C 209.340 38.226, 192.622 49.472, 183.915 60.285 C 178.988 66.405, 174.695 75.358, 173.121 82.799 C 171.575 90.109, 171.776 107.876, 173.515 117.500 C 174.310 121.900, 174.970 125.654, 174.980 125.842 C 174.991 126.030, 170.613 121.744, 165.250 116.317 C 151.628 102.532, 142.067 98, 126.606 98 C 108.485 98, 96.665 106.274, 91.870 122.316 C 90.689 126.267, 89.282 130.060, 88.744 130.744 C 88.206 131.428, 83.881 134.039, 79.133 136.547 C 71.248 140.712, 52.963 154.214, 53.027 155.824 C 53.042 156.196, 54.792 157.572, 56.917 158.881 C 60.708 161.219, 65 167.284, 65 170.304 C 65 171.147, 62.937 174.236, 60.415 177.168 C 52.460 186.419, 48.049 197.952, 48.015 209.590 C 47.981 221.298, 54.527 238.745, 64.096 252.451 L 69.276 259.869 63.639 266.185 C 56.605 274.065, 51.330 283.949, 49.467 292.743 C 47.459 302.219, 47.634 306.025, 50.629 318 C 53.964 331.333, 54.126 339.806, 51.172 346.405 C 49.964 349.102, 49.094 351.416, 49.238 351.546 C 49.382 351.676, 53.887 353.826, 59.250 356.323 L 69 360.863 69 364.722 C 69 370.275, 71.560 379.499, 75.183 387 C 79.583 396.110, 92.115 408.565, 101.237 412.893 C 113.291 418.612, 122.435 420.317, 137.950 419.737 C 148.246 419.352, 152.918 418.722, 157.407 417.115 C 160.655 415.952, 164.086 415, 165.032 415 C 166.844 415, 168 418.626, 168 424.309 C 168 425.992, 168.976 429.385, 170.169 431.850 C 174.960 441.747, 186.015 448.828, 201.204 451.730 C 213.281 454.038, 214.205 455.260, 211.141 464.882 C 210.140 468.026, 210.296 468.496, 213.353 471.553 C 217.479 475.679, 222.457 476.709, 230.475 475.094 C 236.854 473.810, 247.163 469.444, 252.074 465.947 L 255.020 463.849 258.511 466.007 C 262.707 468.600, 265 471.659, 265 474.663 C 265 478.248, 266.646 478.334, 274.301 475.147 C 278.281 473.490, 284.678 471.635, 288.518 471.023 C 292.358 470.411, 298.112 469.504, 301.305 469.006 C 317.082 466.546, 335.303 451.477, 343.028 434.500 C 346.594 426.662, 348 419.720, 348 409.951 C 348 405.578, 348.188 402, 348.418 402 C 348.648 402, 351.029 403.102, 353.710 404.448 C 356.391 405.795, 360.591 407.359, 363.042 407.924 C 369.647 409.446, 384.740 409.213, 391.540 407.485 C 407.802 403.351, 423.040 391.768, 429.553 378.590 C 432.729 372.163, 433.088 370.603, 433.105 363.159 C 433.127 353.032, 433.077 353.092, 447.666 345.616 C 460.756 338.908, 464.605 335.841, 469.915 327.890 C 480.478 312.071, 480.800 291.988, 470.779 274 C 464.175 262.146, 453.923 251.063, 442.250 243.158 C 438.813 240.830, 436 238.704, 436 238.433 C 436 238.163, 437.842 235.611, 440.093 232.763 C 445.491 225.934, 451.448 213.938, 454.234 204.285 C 456.153 197.637, 456.477 194.164, 456.454 180.500 C 456.422 161.589, 454.466 152.151, 447.504 137.322 C 442.320 126.280, 438.551 120.646, 431.895 113.991 C 426.112 108.207, 421.194 105.449, 413.858 103.876 C 409.212 102.880, 408.506 102.955, 407.325 104.571 C 406.596 105.567, 406 107.577, 406 109.036 C 406 112.246, 403.209 115, 399.956 115 C 398.643 115, 393.037 113.435, 387.497 111.522 C 371.887 106.132, 361.849 105.885, 344 110.452 L 341.500 111.091 341.500 99.296 C 341.500 90.411, 341.032 86.073, 339.602 81.715 C 336.104 71.054, 325.779 58.934, 316.030 54.046 C 314.088 53.073, 308 50.820, 302.500 49.039 C 290.189 45.052, 288.582 43.504, 289.459 36.484 C 290.238 30.248, 289.567 28.345, 285.928 26.463 C 282.551 24.716, 278.720 24.736, 270 26.543 M 273.250 39.973 C 270.913 41.034, 269.009 42.262, 269.019 42.701 C 269.048 43.903, 284.890 54.444, 285.600 53.733 C 285.938 53.395, 285.727 50.954, 285.131 48.309 C 284.534 45.664, 283.803 42.263, 283.504 40.750 C 282.834 37.353, 279.567 37.105, 273.250 39.973 M 231 45.563 C 213.084 49.432, 196.417 64.280, 186.464 85.239 C 179.828 99.212, 178.395 117.542, 182.831 131.731 C 183.902 135.158, 187.703 143.033, 191.277 149.231 C 194.851 155.429, 198.566 162.075, 199.532 164 C 201.931 168.779, 222.814 200.953, 225.347 203.771 C 227.166 205.795, 227.551 205.878, 228.897 204.532 C 230.243 203.185, 230.195 202.758, 228.453 200.581 C 203.525 169.430, 195 149.330, 195 121.702 C 195 92.479, 208.499 69.648, 239.578 46.306 L 242.500 44.111 240 44.135 C 238.625 44.148, 234.575 44.791, 231 45.563 M 247.723 58.750 C 213.156 89.196, 205.004 130.208, 225.609 170 C 229.494 177.503, 238.048 190.286, 238.728 189.605 C 238.866 189.467, 237.183 182.412, 234.987 173.927 C 229.905 154.283, 228.131 138.280, 229.828 127.367 C 231.484 116.715, 232.998 115.611, 233.006 125.050 C 233.018 140.830, 239.828 173.636, 247.014 192.537 C 249.462 198.974, 250.149 191.612, 251.011 149.712 C 251.783 112.228, 252.611 99.313, 254.679 92.516 C 255.273 90.567, 255.296 90.569, 256.049 92.604 C 256.470 93.742, 257.603 101.835, 258.567 110.587 C 260.467 127.854, 261.010 161.193, 259.761 184 C 259.345 191.601, 259.395 196.626, 259.876 195.500 C 260.701 193.568, 262.652 188.758, 271.223 167.520 C 275.942 155.826, 278.512 144.173, 280.043 127.528 C 280.651 120.923, 281.340 115.327, 281.574 115.093 C 282.838 113.829, 283.433 117.235, 283.789 127.780 C 284.259 141.698, 282.434 151.946, 275.643 173.500 C 273.218 181.200, 270.923 189.525, 270.543 192 C 270.164 194.475, 269.606 197.400, 269.303 198.500 C 268.805 200.306, 269.009 200.263, 271.404 198.049 C 274.070 195.586, 285 175.082, 289.054 164.940 C 298.013 142.525, 298.920 120.332, 291.667 101.022 C 287.570 90.114, 281.123 78.750, 274.424 70.629 C 268.815 63.829, 257.137 54, 254.666 54 C 253.814 54, 250.690 56.138, 247.723 58.750 M 290.502 62.003 C 290.946 62.722, 293.618 66.527, 296.439 70.459 C 303.109 79.756, 308.443 90.654, 311.171 100.558 C 313 107.198, 313.362 111.163, 313.378 124.750 C 313.392 136.662, 313.716 141, 314.591 141 C 316.572 141, 326.579 129.500, 329.094 124.332 C 332.456 117.424, 332.177 110.479, 328.170 101.341 C 326.101 96.623, 324.799 91.691, 324.352 86.873 C 323.714 80.012, 323.405 79.278, 319.300 74.890 C 314.206 69.444, 300.738 62.177, 294.085 61.285 C 290.622 60.820, 289.865 60.972, 290.502 62.003 M 119.500 111.872 C 114.455 113.207, 110.521 115.681, 106.675 119.938 C 102.832 124.192, 101.962 127, 104.487 127 C 105.306 127, 110.368 125.852, 115.737 124.448 C 129.080 120.960, 139.713 120.307, 147.956 122.469 C 155.331 124.402, 157.936 125.634, 167 131.471 C 176.418 137.536, 176.870 137.694, 173 133.575 C 168.625 128.917, 157.926 120.964, 152.048 117.999 C 141.274 112.564, 127.022 109.881, 119.500 111.872 M 408.704 119.125 C 406.430 121.716, 406.171 122.527, 407.188 123.875 C 409.272 126.638, 412.239 128.902, 419.218 133.054 C 427.648 138.069, 427.633 138.017, 428.523 165.500 C 429.081 182.684, 428.909 188.207, 427.577 195.896 C 425.751 206.442, 421.647 217.527, 416.328 226.283 C 412.620 232.387, 412.716 233.322, 417.154 234.366 C 422.761 235.684, 434.494 218.698, 439.197 202.455 C 441.199 195.540, 441.500 192.277, 441.500 177.500 C 441.500 158.615, 440.569 154.081, 433.508 138.587 C 428.632 127.887, 424.589 122.330, 419.192 118.907 C 413.407 115.238, 412.090 115.266, 408.704 119.125 M 356 122.489 C 344.309 125.115, 332.593 130.468, 328.434 135.082 L 326.500 137.227 330.500 135.478 C 351.221 126.417, 358.543 124.687, 374.226 125.150 L 386.209 125.504 382.123 123.722 C 376.489 121.265, 364.057 120.678, 356 122.489 M 117 142.490 C 108.462 143.952, 100.250 146, 88 149.720 C 75.075 153.646, 75.710 152.941, 78.631 160.131 C 80.002 163.505, 83.148 173.969, 85.622 183.383 C 90.599 202.327, 94.691 211.835, 101.300 219.810 C 116.168 237.753, 145.812 248.898, 183.088 250.561 C 200.187 251.323, 201.005 251.005, 201.745 243.298 C 202.090 239.708, 201.837 238.007, 200.865 237.380 C 200.114 236.896, 190.050 236.204, 178.500 235.843 C 155.861 235.135, 147.010 233.627, 135.386 228.498 C 129.306 225.815, 123.019 221.955, 123.007 220.897 C 123.003 220.565, 127.475 221.792, 132.945 223.625 C 146.340 228.111, 162.696 230.926, 179 231.550 L 192.500 232.066 187 229.468 C 183.975 228.038, 175.441 224.830, 168.036 222.337 C 145.636 214.797, 126.824 204.159, 117.448 193.731 C 112.611 188.352, 111.644 185.882, 115.316 188.288 C 131.465 198.868, 136.907 202.155, 145.465 206.496 C 155.369 211.519, 166.634 215.699, 167.617 214.716 C 168.370 213.964, 143.051 194.885, 119.750 178.646 C 114.388 174.909, 110 171.434, 110 170.925 C 110 169.724, 109.785 169.690, 116.304 171.933 C 126.329 175.382, 140.078 183.171, 161.500 197.535 C 204.189 226.162, 209.915 227.898, 182.092 203.778 C 168.677 192.149, 155.317 182.246, 141.313 173.551 C 135.160 169.731, 130.326 166.282, 130.571 165.886 C 131.851 163.813, 149.145 171.336, 160.087 178.725 C 167.114 183.470, 171.267 186.766, 197.916 208.750 C 204.083 213.838, 209.513 218, 209.983 218 C 211.703 218, 215.208 210.962, 214.604 208.719 C 213.844 205.894, 198.225 183.212, 191 174.441 C 183.419 165.238, 169.453 153.206, 161.141 148.716 C 147.915 141.573, 133.898 139.595, 117 142.490 M 363 146.359 C 341.280 151.458, 319.612 165.738, 305.130 184.497 C 297.398 194.512, 287 210.290, 287 212.008 C 287 213.827, 291.994 219, 293.750 219 C 294.377 219, 298.853 214.397, 303.695 208.771 C 324.001 185.182, 339.106 171.625, 352.619 164.865 C 363.415 159.463, 366.255 160.043, 357.835 165.930 C 343.779 175.758, 322.947 195.329, 311.162 209.777 C 306.112 215.967, 303.456 220, 304.427 220 C 304.700 220, 308.879 216.710, 313.712 212.689 C 340.692 190.245, 386.475 160.925, 387.894 165.182 C 388.804 167.911, 366.636 186.060, 335 208.488 C 314.583 222.962, 306.020 229.353, 306.457 229.790 C 307.456 230.789, 327.156 223.491, 336.857 218.529 C 349.272 212.178, 357.236 207.012, 372.762 195.234 C 378.957 190.536, 384.296 186.962, 384.627 187.293 C 385.733 188.400, 380.916 194.915, 375.178 200.069 C 361.478 212.378, 337.040 225.837, 315.933 232.698 C 307.813 235.338, 304.902 236.735, 304.431 238.217 C 303.331 241.683, 305.417 242.381, 316.235 242.166 C 348.276 241.531, 378.903 230.149, 393.925 213.294 C 399.733 206.778, 404.974 197.209, 407.810 187.942 C 410.593 178.847, 413.172 161.552, 412.805 154.437 L 412.500 148.500 405.500 147.234 C 394.944 145.326, 369.621 144.804, 363 146.359 M 310.646 156.452 C 308.151 158.764, 306.889 161.805, 308.953 160.529 C 310.076 159.835, 314.331 154, 313.714 154 C 313.482 154, 312.101 155.104, 310.646 156.452 M 163 163.531 C 163 163.824, 168.387 169.889, 174.971 177.010 C 181.556 184.131, 191.051 194.917, 196.071 200.978 C 201.092 207.040, 205.654 212, 206.208 212 C 207.907 212, 206.091 206.977, 202.362 201.358 C 192.999 187.252, 163 158.423, 163 163.531 M 65.407 195.250 C 61.913 205.713, 63.761 221.395, 70.092 235 C 73.978 243.349, 80.168 252.980, 81.657 252.991 C 82.293 252.996, 85.823 251.650, 89.500 250 L 96.187 247 89.844 240.117 C 86.355 236.332, 81.986 230.712, 80.135 227.628 C 75.814 220.431, 71.359 207.477, 69.837 197.688 C 69.179 193.460, 68.308 190, 67.901 190 C 67.494 190, 66.372 192.363, 65.407 195.250 M 363.317 220.821 C 348.516 227.792, 345.464 229.618, 350.502 228.493 C 361.152 226.114, 376.043 218.975, 378.438 215.100 C 379.547 213.306, 378.172 213.826, 363.317 220.821 M 243.286 220.386 C 232.542 223.910, 223.719 231.992, 219.853 241.853 C 216.463 250.497, 216.707 262.477, 220.441 270.734 C 223.847 278.270, 230.710 285.037, 238.782 288.820 C 243.656 291.105, 245.828 291.500, 253.500 291.500 C 261.522 291.500, 263.223 291.158, 269.151 288.349 C 281.228 282.627, 288.462 272.565, 289.651 259.836 C 291.671 238.207, 276.569 220.511, 255.144 219.400 C 250.301 219.149, 245.956 219.510, 243.286 220.386 M 401.215 245.088 L 398.122 248.398 406.687 253.449 C 411.398 256.227, 418.106 261.113, 421.593 264.308 C 428.526 270.659, 436.762 282.192, 439.518 289.407 C 441.363 294.240, 442.388 295.036, 443.393 292.418 C 445.181 287.760, 441.877 272.220, 437.320 263.846 C 432.005 254.081, 417.836 243.592, 408.217 242.302 C 404.758 241.838, 403.953 242.158, 401.215 245.088 M 95.748 253.758 C 93.135 255.266, 88.380 258.750, 85.182 261.500 C 69.527 274.962, 62.050 290.438, 62.015 309.450 C 61.998 318.615, 63.169 318.455, 64.954 309.051 C 66.542 300.692, 71.192 289.056, 75.599 282.417 C 80.151 275.558, 90.652 265.715, 100.300 259.262 C 107.896 254.182, 107.969 254.092, 105.777 252.556 C 102.719 250.414, 101.235 250.592, 95.748 253.758 M 306.250 260.108 C 304.382 262.039, 304.696 266.666, 306.750 267.474 C 307.712 267.852, 317.500 268.573, 328.500 269.076 C 339.500 269.579, 352.470 270.674, 357.323 271.508 C 367.805 273.310, 381.317 277.612, 384.339 280.109 C 386.423 281.831, 386.270 281.841, 380 280.389 C 363.282 276.519, 343.983 273.919, 333.289 274.096 L 327.500 274.191 332.500 275.741 C 358.643 283.845, 375.407 290.600, 386.500 297.500 C 393.585 301.907, 401.406 309, 399.181 309 C 398.514 309, 392.689 306.357, 386.235 303.126 C 371.273 295.637, 354.747 289.116, 337.839 284.032 C 320.592 278.846, 303.024 275.119, 306.083 277.297 C 307.414 278.244, 348.352 297.628, 363.925 304.685 C 382.525 313.114, 404.815 324.518, 408.500 327.490 L 410.500 329.104 408.500 328.607 C 407.400 328.334, 402.675 327.220, 398 326.131 C 379.118 321.733, 352.564 310.748, 323.861 295.460 C 313.059 289.707, 303.722 285, 303.111 285 C 300.555 285, 302.509 287.291, 311.370 294.683 C 331.854 311.772, 349.573 322.771, 369.258 330.619 C 379.843 334.839, 381.051 335.543, 378.183 335.818 C 363.275 337.249, 333.608 321.425, 304.097 296.302 C 300.026 292.836, 296.173 290, 295.534 290 C 294.896 290, 293.109 291.321, 291.562 292.935 C 287.770 296.893, 288.336 298.523, 297.491 310 C 307.743 322.853, 317.903 333.106, 327.448 340.232 C 336.454 346.955, 354.780 356.181, 363 358.130 C 370.414 359.888, 384.057 359.647, 392 357.618 C 404.550 354.412, 424.015 343.377, 436.902 332.161 L 441.304 328.330 434.243 316.915 C 430.360 310.637, 425.132 302.331, 422.625 298.457 C 409.497 278.174, 393.372 267.246, 368.500 261.774 C 356.949 259.233, 308.354 257.932, 306.250 260.108 M 153.672 261.567 C 129.195 265.375, 111.384 274.324, 99.400 288.835 C 93.458 296.029, 83.945 314.194, 76.531 332.500 L 72.076 343.500 75.099 346.124 C 83.052 353.026, 110.637 365.717, 122.784 368.061 C 131.325 369.709, 145.022 368.785, 152.146 366.079 C 164.920 361.227, 177.549 350.738, 188.965 335.500 C 199.444 321.513, 211.917 300.122, 211.978 296.034 C 212.012 293.739, 201.606 304.528, 193.685 315 C 183.961 327.857, 171.370 340.778, 164.559 344.889 C 161.471 346.753, 158.661 347.995, 158.315 347.649 C 157.969 347.303, 162.409 342.178, 168.182 336.260 C 173.954 330.342, 182.288 321, 186.700 315.500 C 191.113 310, 197.711 301.915, 201.362 297.534 C 215.618 280.427, 206.373 286.499, 183.985 308.948 C 165.596 327.387, 153.324 336.377, 139.604 341.462 C 124.269 347.144, 124.343 345.444, 139.833 336.182 C 156.576 326.170, 177.683 309.350, 175.829 307.496 C 175.535 307.202, 164.286 312.515, 150.832 319.303 C 127.664 330.990, 109.858 338.204, 108.235 336.559 C 106.232 334.529, 125.332 322.147, 153 307.538 C 172.140 297.431, 186.386 289.053, 185.662 288.328 C 184.908 287.575, 164.654 292.076, 157 294.697 C 149.499 297.266, 134.893 304.370, 121.250 312.085 C 108.665 319.203, 113.629 312.010, 128 302.305 C 139.562 294.497, 151.284 289.816, 175.190 283.460 C 184.711 280.929, 192.950 278.385, 193.500 277.806 C 194.199 277.071, 189.833 276.931, 179 277.342 C 162.188 277.980, 151.504 279.853, 135.897 284.896 C 125.065 288.397, 122.459 288.761, 125.500 286.351 C 129.014 283.565, 139.425 279.193, 148.092 276.864 C 155.211 274.951, 159.949 274.520, 179 274.052 L 201.500 273.500 201.462 268.500 C 201.395 259.503, 202.559 259.987, 181.281 260.097 C 170.840 260.151, 158.580 260.804, 153.672 261.567 M 454.598 272 C 457.385 281.898, 456.528 295.488, 452.549 304.485 L 450.047 310.143 453.536 317.071 C 455.455 320.882, 457.445 324, 457.958 324 C 458.471 324, 460.603 320.536, 462.695 316.302 C 466.205 309.201, 466.500 307.940, 466.500 300.052 C 466.500 292.084, 466.219 290.919, 462.393 283 C 460.135 278.325, 457.298 273.375, 456.090 272 L 453.894 269.500 454.598 272 M 220.693 301.787 C 218.616 304.082, 214.660 312.993, 215.392 313.726 C 216.747 315.080, 225 304.639, 225 301.570 C 225 299.464, 222.690 299.580, 220.693 301.787 M 271.410 308.375 C 271.119 309.131, 273.329 313.519, 276.319 318.125 C 279.310 322.731, 283.186 329.348, 284.932 332.829 C 288.254 339.448, 295 358.577, 295 361.377 C 295 363.496, 293.150 363.442, 290.708 361.250 C 288.790 359.528, 288.772 359.603, 289.523 366 C 290.389 373.376, 290.417 390.917, 289.564 391.770 C 288.476 392.858, 288.113 391.358, 286.529 379.226 C 284.624 364.622, 281.045 349.965, 277.483 342.173 C 274.626 335.926, 265.925 320.737, 265.470 321.205 C 265.313 321.367, 266.689 327.373, 268.528 334.550 C 273.491 353.918, 275.387 368.118, 275.397 386 C 275.404 399.037, 275.051 402.750, 273.174 409.366 C 271.947 413.692, 270.299 418.417, 269.511 419.866 C 268.215 422.252, 268.075 421.089, 268.031 407.500 C 267.973 389.633, 266.571 368.828, 264.475 354.734 C 262.918 344.261, 257.368 319.649, 255.979 317.059 C 254.652 314.584, 253.497 330.484, 253.550 350.500 C 253.601 369.848, 254.716 379.714, 259.057 399.239 C 261.283 409.253, 261.253 409, 260.222 409 C 259.250 409, 253.574 393.530, 251.601 385.500 C 248.846 374.291, 247.911 363.540, 247.929 343.293 C 247.939 332.179, 247.557 322.844, 247.080 322.549 C 246.014 321.891, 243.290 332.879, 242.010 343 C 240.718 353.215, 240.759 379.561, 242.079 388.071 C 242.672 391.896, 242.948 395.583, 242.691 396.263 C 241.787 398.656, 239.153 390.360, 237.399 379.592 C 235.832 369.979, 235.766 367.178, 236.832 355.604 C 237.496 348.397, 239.158 337.775, 240.527 332 C 245.006 313.100, 245.406 311.073, 244.782 310.449 C 244.443 310.109, 242.362 309.590, 240.158 309.294 L 236.151 308.757 231.674 318.128 C 223.661 334.903, 220 350.753, 220 368.673 C 220 386.924, 224.298 401.430, 234.152 416.441 C 242.117 428.574, 265.423 452, 269.528 452 C 272.114 452, 286.967 439.857, 292.521 433.203 C 298.853 425.616, 306.252 411.412, 308.494 402.540 C 313.435 382.986, 305.326 353.288, 287.049 324 C 277.823 309.215, 272.954 304.351, 271.410 308.375 M 207 332 C 206.361 333.194, 206.063 334.396, 206.338 334.671 C 206.613 334.946, 207.361 334.194, 208 333 C 208.639 331.806, 208.937 330.604, 208.662 330.329 C 208.387 330.054, 207.639 330.806, 207 332 M 189.996 371.758 C 181.493 380.539, 180.169 383.486, 179.315 395.531 C 178.598 405.637, 180.313 416.059, 183.942 423.653 C 189.004 434.244, 195.568 437.889, 211.123 438.747 C 223.165 439.410, 223.298 439.121, 216.045 428.058 C 204.544 410.516, 200.666 397.913, 200.567 377.751 C 200.511 366.242, 200.256 364.002, 199.004 364.001 C 198.181 364, 194.127 367.491, 189.996 371.758 M 409.500 370.972 C 391.997 380.553, 377.197 383.636, 362.898 380.678 C 354.747 378.992, 345.814 375.428, 340.813 371.867 C 337.265 369.340, 337.217 369.132, 342.500 379.299 C 346.877 387.722, 348.299 388.801, 358.550 391.471 C 366.187 393.460, 382.794 393.459, 390.540 391.468 C 408.109 386.953, 424.351 374.261, 420.874 367.764 C 420.354 366.794, 419.608 366.010, 419.215 366.023 C 418.822 366.035, 414.450 368.262, 409.500 370.972 M 83 370.459 C 83 374.598, 87.501 383.213, 92.617 388.866 C 99.061 395.987, 110.389 402.122, 120.434 403.931 C 133.763 406.332, 154.699 404.349, 163.824 399.821 C 168.052 397.722, 168.764 396.839, 171.260 390.593 C 172.778 386.795, 173.903 383.572, 173.760 383.431 C 173.617 383.290, 170.840 384.297, 167.589 385.669 C 141.282 396.773, 119.801 393.714, 91.750 374.871 C 86.068 371.054, 83 369.507, 83 370.459 M 332.100 387.178 C 331.886 405.751, 328.737 418.187, 320.307 433.750 C 315.216 443.148, 316.028 444.368, 323.182 438.071 C 328.470 433.416, 333.180 424.997, 335.528 416 C 337.665 407.815, 337.036 393.204, 334.173 384.500 L 332.200 378.500 332.100 387.178 M 224.269 444.941 C 221.340 448.655, 220 452.328, 220 456.637 L 220 460.144 225.750 459.503 C 233.442 458.645, 242.156 455.968, 241.703 454.602 C 241.332 453.485, 227.920 442.079, 227 442.100 C 226.725 442.106, 225.496 443.384, 224.269 444.941 M 304.750 448.735 C 300.279 453.324, 299.977 454.580, 303.823 452.592 C 307.445 450.718, 309.253 448.518, 308.833 446.491 C 308.581 445.278, 307.583 445.827, 304.750 448.735" />

    </svg>
  )
}

// const IconMagnolia = ({inverted, className, ...props }: React.ComponentProps<'img'> & {inverted ?: boolean}) => {

//   return (
//     <img
//       src="next.png"
//       alt="Magnolia logo"
//       className={cn(className, "h-12 w-12")}
//     />
//   )

// }

function IconOpenAI({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      fill="currentColor"
      viewBox="0 0 24 24"
      role="img"
      xmlns="http://www.w3.org/2000/svg"
      className={cn(className)}
      {...props}
    >
      <title>OpenAI icon</title>
      <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
    </svg>
  )
}

function IconVercel({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      aria-label="Vercel logomark"
      role="img"
      viewBox="0 0 74 64"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path
        d="M37.5896 0.25L74.5396 64.25H0.639648L37.5896 0.25Z"
        fill="currentColor"
      ></path>
    </svg>
  )
}

function IconGitHub({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <title>GitHub</title>
      <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
    </svg>
  )
}

function IconSeparator({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      fill="none"
      shapeRendering="geometricPrecision"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1"
      viewBox="0 0 24 24"
      aria-hidden="true"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M16.88 3.549L7.12 20.451"></path>
    </svg>
  )
}

function IconArrowDown({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="m205.66 149.66-72 72a8 8 0 0 1-11.32 0l-72-72a8 8 0 0 1 11.32-11.32L120 196.69V40a8 8 0 0 1 16 0v156.69l58.34-58.35a8 8 0 0 1 11.32 11.32Z" />
    </svg>
  )
}

function IconArrowRight({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="m221.66 133.66-72 72a8 8 0 0 1-11.32-11.32L196.69 136H40a8 8 0 0 1 0-16h156.69l-58.35-58.34a8 8 0 0 1 11.32-11.32l72 72a8 8 0 0 1 0 11.32Z" />
    </svg>
  )
}

function IconUser({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn(className)}
      {...props}
    >
      <path d="M230.92 212c-15.23-26.33-38.7-45.21-66.09-54.16a72 72 0 1 0-73.66 0c-27.39 8.94-50.86 27.82-66.09 54.16a8 8 0 1 0 13.85 8c18.84-32.56 52.14-52 89.07-52s70.23 19.44 89.07 52a8 8 0 1 0 13.85-8ZM72 96a56 56 0 1 1 56 56 56.06 56.06 0 0 1-56-56Z" />
    </svg>
  )
}

function IconPlus({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M224 128a8 8 0 0 1-8 8h-80v80a8 8 0 0 1-16 0v-80H40a8 8 0 0 1 0-16h80V40a8 8 0 0 1 16 0v80h80a8 8 0 0 1 8 8Z" />
    </svg>
  )
}

function IconArrowElbow({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M200 32v144a8 8 0 0 1-8 8H67.31l34.35 34.34a8 8 0 0 1-11.32 11.32l-48-48a8 8 0 0 1 0-11.32l48-48a8 8 0 0 1 11.32 11.32L67.31 168H184V32a8 8 0 0 1 16 0Z" />
    </svg>
  )
}

function IconSpinner({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4 animate-spin', className)}
      {...props}
    >
      <path d="M232 128a104 104 0 0 1-208 0c0-41 23.81-78.36 60.66-95.27a8 8 0 0 1 6.68 14.54C60.15 61.59 40 93.27 40 128a88 88 0 0 0 176 0c0-34.73-20.15-66.41-51.34-80.73a8 8 0 0 1 6.68-14.54C208.19 49.64 232 87 232 128Z" />
    </svg>
  )
}

function IconMessage({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M216 48H40a16 16 0 0 0-16 16v160a15.84 15.84 0 0 0 9.25 14.5A16.05 16.05 0 0 0 40 240a15.89 15.89 0 0 0 10.25-3.78.69.69 0 0 0 .13-.11L82.5 208H216a16 16 0 0 0 16-16V64a16 16 0 0 0-16-16ZM40 224Zm176-32H82.5a16 16 0 0 0-10.3 3.75l-.12.11L40 224V64h176Z" />
    </svg>
  )
}

function IconTrash({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M216 48h-40v-8a24 24 0 0 0-24-24h-48a24 24 0 0 0-24 24v8H40a8 8 0 0 0 0 16h8v144a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16V64h8a8 8 0 0 0 0-16ZM96 40a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v8H96Zm96 168H64V64h128Zm-80-104v64a8 8 0 0 1-16 0v-64a8 8 0 0 1 16 0Zm48 0v64a8 8 0 0 1-16 0v-64a8 8 0 0 1 16 0Z" />
    </svg>
  )
}

function IconRefresh({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M197.67 186.37a8 8 0 0 1 0 11.29C196.58 198.73 170.82 224 128 224c-37.39 0-64.53-22.4-80-39.85V208a8 8 0 0 1-16 0v-48a8 8 0 0 1 8-8h48a8 8 0 0 1 0 16H55.44C67.76 183.35 93 208 128 208c36 0 58.14-21.46 58.36-21.68a8 8 0 0 1 11.31.05ZM216 40a8 8 0 0 0-8 8v23.85C192.53 54.4 165.39 32 128 32c-42.82 0-68.58 25.27-69.66 26.34a8 8 0 0 0 11.3 11.34C69.86 69.46 92 48 128 48c35 0 60.24 24.65 72.56 40H168a8 8 0 0 0 0 16h48a8 8 0 0 0 8-8V48a8 8 0 0 0-8-8Z" />
    </svg>
  )
}

function IconStop({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M128 24a104 104 0 1 0 104 104A104.11 104.11 0 0 0 128 24Zm0 192a88 88 0 1 1 88-88 88.1 88.1 0 0 1-88 88Zm24-120h-48a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h48a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8Zm-8 48h-32v-32h32Z" />
    </svg>
  )
}

function IconSidebar({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M216 40H40a16 16 0 0 0-16 16v144a16 16 0 0 0 16 16h176a16 16 0 0 0 16-16V56a16 16 0 0 0-16-16ZM40 56h40v144H40Zm176 144H96V56h120v144Z" />
    </svg>
  )
}

function IconMoon({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M233.54 142.23a8 8 0 0 0-8-2 88.08 88.08 0 0 1-109.8-109.8 8 8 0 0 0-10-10 104.84 104.84 0 0 0-52.91 37A104 104 0 0 0 136 224a103.09 103.09 0 0 0 62.52-20.88 104.84 104.84 0 0 0 37-52.91 8 8 0 0 0-1.98-7.98Zm-44.64 48.11A88 88 0 0 1 65.66 67.11a89 89 0 0 1 31.4-26A106 106 0 0 0 96 56a104.11 104.11 0 0 0 104 104 106 106 0 0 0 14.92-1.06 89 89 0 0 1-26.02 31.4Z" />
    </svg>
  )
}

function IconSun({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M120 40V16a8 8 0 0 1 16 0v24a8 8 0 0 1-16 0Zm72 88a64 64 0 1 1-64-64 64.07 64.07 0 0 1 64 64Zm-16 0a48 48 0 1 0-48 48 48.05 48.05 0 0 0 48-48ZM58.34 69.66a8 8 0 0 0 11.32-11.32l-16-16a8 8 0 0 0-11.32 11.32Zm0 116.68-16 16a8 8 0 0 0 11.32 11.32l16-16a8 8 0 0 0-11.32-11.32ZM192 72a8 8 0 0 0 5.66-2.34l16-16a8 8 0 0 0-11.32-11.32l-16 16A8 8 0 0 0 192 72Zm5.66 114.34a8 8 0 0 0-11.32 11.32l16 16a8 8 0 0 0 11.32-11.32ZM48 128a8 8 0 0 0-8-8H16a8 8 0 0 0 0 16h24a8 8 0 0 0 8-8Zm80 80a8 8 0 0 0-8 8v24a8 8 0 0 0 16 0v-24a8 8 0 0 0-8-8Zm112-88h-24a8 8 0 0 0 0 16h24a8 8 0 0 0 0-16Z" />
    </svg>
  )
}

function IconCopy({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M216 32H88a8 8 0 0 0-8 8v40H40a8 8 0 0 0-8 8v128a8 8 0 0 0 8 8h128a8 8 0 0 0 8-8v-40h40a8 8 0 0 0 8-8V40a8 8 0 0 0-8-8Zm-56 176H48V96h112Zm48-48h-32V88a8 8 0 0 0-8-8H96V48h112Z" />
    </svg>
  )
}

function IconCheck({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="m229.66 77.66-128 128a8 8 0 0 1-11.32 0l-56-56a8 8 0 0 1 11.32-11.32L96 188.69 218.34 66.34a8 8 0 0 1 11.32 11.32Z" />
    </svg>
  )
}

function IconDownload({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M224 152v56a16 16 0 0 1-16 16H48a16 16 0 0 1-16-16v-56a8 8 0 0 1 16 0v56h160v-56a8 8 0 0 1 16 0Zm-101.66 5.66a8 8 0 0 0 11.32 0l40-40a8 8 0 0 0-11.32-11.32L136 132.69V40a8 8 0 0 0-16 0v92.69l-26.34-26.35a8 8 0 0 0-11.32 11.32Z" />
    </svg>
  )
}

function IconClose({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path d="M205.66 194.34a8 8 0 0 1-11.32 11.32L128 139.31l-66.34 66.35a8 8 0 0 1-11.32-11.32L116.69 128 50.34 61.66a8 8 0 0 1 11.32-11.32L128 116.69l66.34-66.35a8 8 0 0 1 11.32 11.32L139.31 128Z" />
    </svg>
  )
}

function IconEdit({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      strokeWidth={1.5}
      stroke="currentColor"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
      />
    </svg>
  )
}

function IconShare({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      viewBox="0 0 256 256"
      {...props}
    >
      <path d="m237.66 106.35-80-80A8 8 0 0 0 144 32v40.35c-25.94 2.22-54.59 14.92-78.16 34.91-28.38 24.08-46.05 55.11-49.76 87.37a12 12 0 0 0 20.68 9.58c11-11.71 50.14-48.74 107.24-52V192a8 8 0 0 0 13.66 5.65l80-80a8 8 0 0 0 0-11.3ZM160 172.69V144a8 8 0 0 0-8-8c-28.08 0-55.43 7.33-81.29 21.8a196.17 196.17 0 0 0-36.57 26.52c5.8-23.84 20.42-46.51 42.05-64.86C99.41 99.77 127.75 88 152 88a8 8 0 0 0 8-8V51.32L220.69 112Z" />
    </svg>
  )
}

function IconUsers({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      viewBox="0 0 256 256"
      {...props}
    >
      <path d="M117.25 157.92a60 60 0 1 0-66.5 0 95.83 95.83 0 0 0-47.22 37.71 8 8 0 1 0 13.4 8.74 80 80 0 0 1 134.14 0 8 8 0 0 0 13.4-8.74 95.83 95.83 0 0 0-47.22-37.71ZM40 108a44 44 0 1 1 44 44 44.05 44.05 0 0 1-44-44Zm210.14 98.7a8 8 0 0 1-11.07-2.33A79.83 79.83 0 0 0 172 168a8 8 0 0 1 0-16 44 44 0 1 0-16.34-84.87 8 8 0 1 1-5.94-14.85 60 60 0 0 1 55.53 105.64 95.83 95.83 0 0 1 47.22 37.71 8 8 0 0 1-2.33 11.07Z" />
    </svg>
  )
}

function IconExternalLink({
  className,
  ...props
}: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      viewBox="0 0 256 256"
      {...props}
    >
      <path d="M224 104a8 8 0 0 1-16 0V59.32l-66.33 66.34a8 8 0 0 1-11.32-11.32L196.68 48H152a8 8 0 0 1 0-16h64a8 8 0 0 1 8 8Zm-40 24a8 8 0 0 0-8 8v72H48V80h72a8 8 0 0 0 0-16H48a16 16 0 0 0-16 16v128a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-72a8 8 0 0 0-8-8Z" />
    </svg>
  )
}

function IconChevronUpDown({
  className,
  ...props
}: React.ComponentProps<'svg'>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="currentColor"
      className={cn('h-4 w-4', className)}
      viewBox="0 0 256 256"
      {...props}
    >
      <path d="M181.66 170.34a8 8 0 0 1 0 11.32l-48 48a8 8 0 0 1-11.32 0l-48-48a8 8 0 0 1 11.32-11.32L128 212.69l42.34-42.35a8 8 0 0 1 11.32 0Zm-96-84.68L128 43.31l42.34 42.35a8 8 0 0 0 11.32-11.32l-48-48a8 8 0 0 0-11.32 0l-48 48a8 8 0 0 0 11.32 11.32Z" />
    </svg>
  )
}

function IconLaptop({
  className,
  ...props
}: React.ComponentProps<'svg'>) {
  return (
    <svg
      {...props}
      className={cn('h-4 w-4', className)}

      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16" />
    </svg>
  )
}


function IconSmartphone({
  className,
  ...props
}: React.ComponentProps<'svg'>) {
  return (
    <svg
      {...props}
      className={cn('h-4 w-4', className)}

      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="14" height="20" x="5" y="2" rx="2" ry="2" />
      <path d="M12 18h.01" />
    </svg>
  )
}


function IconTablet({
  className,
  ...props
}: React.ComponentProps<'svg'>) {
  return (
    <svg
      {...props}
      className={cn('h-4 w-4', className)}

      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="16" height="20" x="4" y="2" rx="2" ry="2" />
      <line x1="12" x2="12.01" y1="18" y2="18" />
    </svg>
  )
}


export {
  IconMagnolia,
  IconEdit,
  IconNextChat,
  IconOpenAI,
  IconVercel,
  IconGitHub,
  IconSeparator,
  IconArrowDown,
  IconArrowRight,
  IconUser,
  IconPlus,
  IconArrowElbow,
  IconSpinner,
  IconMessage,
  IconTrash,
  IconRefresh,
  IconStop,
  IconSidebar,
  IconMoon,
  IconSun,
  IconCopy,
  IconCheck,
  IconDownload,
  IconClose,
  IconShare,
  IconUsers,
  IconExternalLink,
  IconChevronUpDown,
  IconLaptop,
  IconSmartphone,
  IconTablet,
}
